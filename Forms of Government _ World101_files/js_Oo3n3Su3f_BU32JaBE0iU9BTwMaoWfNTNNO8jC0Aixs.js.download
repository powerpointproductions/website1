/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

if (window.jQuery) {
  jQuery.noConflict();
}

document.documentElement.className += ' js';

(function (Drupal, drupalSettings) {
  var domReady = function domReady(callback) {
    var listener = function listener() {
      callback();
      document.removeEventListener('DOMContentLoaded', listener);
    };

    if (document.readyState !== 'loading') {
      setTimeout(callback, 0);
    } else {
      document.addEventListener('DOMContentLoaded', listener);
    }
  };

  domReady(function () {
    Drupal.attachBehaviors(document, drupalSettings);
  });
})(Drupal, window.drupalSettings);;
(function ($, Drupal, drupalSettings) {
  Drupal.behaviors.datalayerItems = {
    attach: function (context, settings) {

      /*!
       * Render datalayer items.
       */
      var datalayerRender = function (item) {
        if (item.type == 'open_text') {
          eval(item.value);
        }
        else {
          switch(item.triggerElementType) {
            case 'click':
              $(item.elementWithClassID)[item.eventHandlerType](item.triggerElementType, function() {
                datalayerPush(item, $(this));
              });
              break;
            case 'ajax':
              $( document.body ).on(item.eventHandlerType, item.elementWithClassID, function() {
                datalayerPush(item, $(this));
              });
              break;
            case 'on_click':
            case 'on_hover':
              $(item.elementWithClassID)[item.eventHandlerType]( function() {
                datalayerPush(item, $(this));
              });
              break;
            case 'content text copied':
              function getSelectionText() {
                var text = '';
                if (window.getSelection) {
                  text = window.getSelection().toString();
                } else if (document.selection && document.selection.type != 'Control') {
                  text = document.selection.createRange().text;
                }
                return text;
              }
              document.addEventListener('copy', function(e) {
                dataLayer.push({
                  'event' : item.event,
                  'eventCategory' : item.eventCategory,
                  'eventAction' : item.eventAction,
                  'eventLabel' : getSelectionText(),
                  'nonInteraction' : item.nonInteraction,
                  'contentTextCopiedMetric' : item.metric
                });
              });
              break;
            case 'scroll':
              $(document).ready(function() {
                var scroll_name_array=[];
                $(window).scroll(function() {
                  var hT = $(item.elementWithClassID).offset().top,
                      hH = $(item.elementWithClassID).outerHeight(),
                      wH = $(window).height(),
                      wS = $(this).scrollTop();
                  if(!scroll_name_array.includes('scroll')) {
                    scroll_name_array.push('scroll');
                    if (wS > (hT+hH-wH)){
                      datalayerPush(item, $(this));
                    }
                  }
                });
              });
              break;
            default:
          }
        }
      };

      /*!
       * Push datalayer item.
       */
      var datalayerPush = function (item, obj) {
        var label = item.eventLabel;
        // Access parent scope.
        var res = label.replace(/this/g, 'obj');
        dataLayer.push({
          'event' : item.event,
          'eventCategory' : item.eventCategory,
          'eventAction' : item.eventAction,
          'eventLabel' :  eval(res),
          'nonInteraction' : item.nonInteraction,
          'clickMetric' : item.metric
        });
      };

      /*!
       * Render foreachFunction for aggregation.
       */
      var datalayerRenderAll = function (item) {
        datalayerRender(item);
      };

      /*!
       * Clean item value.
       */
      var htmlDecode = function (input) {
        var doc = new DOMParser().parseFromString(input, 'text/html');
        return doc.documentElement.textContent;
      };

      // Datalayer items render.
      $(document).once('datalayerItems').each(function () {
        var data = drupalSettings.dd_datalayer_tools.data_layers;
        // Check bypass flag.
        if (data[0].type == 'bypass') {
          dataLayer = window.dataLayer || [];
        }
        // Render Header Items
        if (data.Head !== undefined) {
          data.Head.forEach(datalayerRenderAll);
        }
        // Render Body Items
        $(document).ready(function() {
          if (data.Body !== undefined) {
            data.Body.forEach(datalayerRenderAll);
          }
        });
        // Render Footer Items when entire page loaded.
        $(window).on('load', function() {
          if (data.Footer !== undefined) {
            data.Footer.forEach(datalayerRenderAll);
          }
        });
      });
      // END Datalayer items render.

      /*!
       * Render foreachFunction for aggregation.
       */
      var customDataRenderAll = function (item) {
        pushItems[item.key] = htmlDecode(item.value);
      };

      // Custom datalayer items render.
      var customData = drupalSettings.dd_datalayer_tools.custom_variables;
      if (customData) {
        dataLayer = window.dataLayer || [];
        // Clean Values.
        var pushItems = [];
        customData.forEach(customDataRenderAll);
        if (pushItems) {
          dataLayer.push(
              pushItems
          )
        }
      }
      // END Custom datalayer items render.

    }
  };
})(jQuery, Drupal, drupalSettings);
;
